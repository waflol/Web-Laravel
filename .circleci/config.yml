version: 2.1
jobs:
  build:
    docker:
      - image: cimg/php:8.2.0
    steps:
      - checkout
      # Download and cache dependencies
      - run:
          name: "Init Temp ENV"
          command: cp .env.example .env
      - run:
          name: "Prepare environment"
          command: |
            apt-get update \
            && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python2 dnsutils librsvg2-bin fswatch \
            && apt-get install -y php8.2-cli php8.2-dev \
              php8.2-pgsql php8.2-sqlite3 php8.2-gd php8.2-imagick \
              php8.2-curl \
              php8.2-imap php8.2-mysql php8.2-mbstring \
              php8.2-xml php8.2-zip php8.2-bcmath php8.2-soap \
              php8.2-intl php8.2-readline \
              php8.2-ldap \
              php8.2-msgpack php8.2-igbinary php8.2-redis php8.2-swoole \
              php8.2-memcached php8.2-pcov php8.2-xdebug \
            && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "Install dependencies"
          command: composer install

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - run:
          name: "Generate environmnet file"
          command: ./vendor/bin/sail artisan env:decrypt --key=${ENV_SECRET_KEY} --force

      - run:
          name: "Run Environment"
          command: |
            ./vendor/bin/sail up

  check-lint:
    docker:
      - image: cimg/php:8.2.0
    steps:
      - checkout
      - run:
          name: Run Check Convention
          command: ./vendor/bin/sail pint .

  test:
    docker:
      - image: cimg/php:.0
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: sail test

workflows:
  pipeline:
    jobs:
      - build
      - check-lint:
          requires:
            - build
      - test:
          requires:
            - build
